# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Target Login >> Target Login With Email
- Location: /Users/olha/my-home-work-js/MyJavaScriptHomeWork/hw-21-reports/allure-report/tests/setup/target-login.spec.ts:5:9

# Error details

```
Error: locator.fill: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('#password')

    at TargetLoginPage.loginWithEmail (/Users/olha/my-home-work-js/MyJavaScriptHomeWork/hw-21-reports/allure-report/src/pages/target-login.page.ts:52:34)
    at /Users/olha/my-home-work-js/MyJavaScriptHomeWork/hw-21-reports/allure-report/tests/setup/target-login.spec.ts:9:9
```

# Page snapshot

```yaml
- img
- heading "Sign in or create account" [level=1]
- paragraph: Enter your email or mobile number to continue
- textbox "Email or mobile phone": vatsykolga@gmail.com
- text: Email or mobile phone
- button "Continue"
- separator
- strong: or
- separator
- button "Sign in with passkey":
  - img
  - text: Sign in with passkey
- button "What's a passkey?"
- heading "Footer" [level=2]
- link "*See offer details. Restrictions apply. Pricing, promotions and availability may vary by location and at Target.com":
  - paragraph:
    - superscript: "*"
    - text: See offer details. Restrictions apply. Pricing, promotions and availability may vary by location and at Target.com
- 'img "Target: Expect More. Pay Less."'
- link "Terms"
- link "CA Supply Chain"
- link "Privacy"
- link "CA Privacy Rights"
- link "Your Privacy Choices":
  - img
  - text: Your Privacy Choices
- link "Interest Based Ads"
- link "Health Privacy Policy"
- paragraph: TM & Â© 2025 Target Brands, Inc.
- alert
```

# Test source

```ts
   1 | import { BrowserContext, Locator, Page } from '@playwright/test';
   2 | import * as fs from 'fs';
   3 |
   4 | export class TargetLoginPage {
   5 |     private get targetLogo(): Locator {
   6 |         return this.page.locator('a[aria-label="Target home"]:first-of-type');
   7 |     }
   8 |
   9 |     private get welcomeAccountLink(): Locator {
  10 |         return this.page.locator('[data-test="\\@web\\/AccountLink"]');
  11 |     }
  12 |
  13 |     private get popUpLogInWindow(): Locator {
  14 |         return this.page.locator('[data-test="accountNav-signIn"]');
  15 |     }
  16 |
  17 |     private get emailInput(): Locator {
  18 |         return this.page.locator('#username');
  19 |     }
  20 |
  21 |     private get passwordInput(): Locator {
  22 |         return this.page.locator('#password');
  23 |     }
  24 |
  25 |     private get loginWithPasswordButton(): Locator {
  26 |         return this.page.getByRole('button', { name: 'Sign in with password' });
  27 |     }
  28 |
  29 |     private get headerMyAccountTarget(): Locator {
  30 |         return this.page.locator('[data-test="modal-drawer-heading"]');
  31 |     }
  32 |
  33 |     public constructor(private page: Page, private context: BrowserContext) {}
  34 |
  35 |     public async clearCookies(): Promise<void> {
  36 |         console.log('[clear Cookies] Clearing all cookies and storage data');
  37 |         await this.context.clearCookies();
  38 |     }
  39 |
  40 |     public async goto(): Promise<void> {
  41 |         await this.page.goto('https://www.target.com/');
  42 |         await this.targetLogo.waitFor();
  43 |     }
  44 |
  45 |     public async loginWithEmail(username: string, password: string): Promise<void> {
  46 |         console.log('[login] Navigating to Target');
  47 |         await this.goto();
  48 |
  49 |         await this.welcomeAccountLink.click();
  50 |         await this.popUpLogInWindow.click();
  51 |         await this.emailInput.fill(username);
> 52 |         await this.passwordInput.fill(password);
     |                                  ^ Error: locator.fill: Test timeout of 30000ms exceeded.
  53 |         await this.loginWithPasswordButton.click();
  54 |
  55 |         await this.targetLogo.waitFor();
  56 |         await this.welcomeAccountLink.click();
  57 |         await this.headerMyAccountTarget.waitFor();
  58 |
  59 |         console.log('[login] Saving browser storage state');
  60 |         const browserState = await this.context.storageState();
  61 |         fs.writeFileSync('browser-context.json', JSON.stringify(browserState, null, 2));
  62 |         console.log('[login] Login flow complete');
  63 |     }
  64 |
  65 |     public isMyAccountHeaderVisible(): Locator {
  66 |         return this.headerMyAccountTarget;
  67 |     }
  68 | }
  69 |
```